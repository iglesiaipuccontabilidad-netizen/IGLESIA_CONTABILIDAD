'use client'

import React from 'react'
import { useRouter } from 'next/navigation'
import styles from '@/styles/forms.module.css'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'

interface MiembroOption {
  id: string
  nombres: string
  apellidos: string
}

export default function NuevoVotoPage() {
  const router = useRouter()
  const supabase = createClientComponentClient()
  const [miembros, setMiembros] = React.useState<MiembroOption[]>([])
  const [formData, setFormData] = React.useState({
    proposito: '',
    montoTotal: '',
    fechaLimite: '',
    miembroId: ''
  })
  const [loading, setLoading] = React.useState(false)
  const [error, setError] = React.useState('')

  React.useEffect(() => {
    const fetchMiembros = async () => {
      const { data, error } = await supabase
        .from('miembros')
        .select('id, nombres, apellidos')
        .order('apellidos')

      if (error) {
        console.error('Error al cargar miembros:', error)
        return
      }

      setMiembros(data || [])
    }

    fetchMiembros()
  }, [supabase])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    try {
      const { error } = await supabase
        .from('votos')
        .insert([
          {
            proposito: formData.proposito,
            monto_total: parseFloat(formData.montoTotal),
            fecha_limite: formData.fechaLimite,
            miembro_id: formData.miembroId,
            estado: 'activo',
            recaudado: 0
          }
        ])

      if (error) throw error

      router.push('/votos')
      router.refresh()
    } catch (error: any) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
  }

  return (
    <div className="container max-w-3xl mx-auto px-4 py-8">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Nuevo Voto</h1>
        <button
          type="button"
          onClick={() => router.back()}
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Volver
        </button>
      </div>

      <div className={styles.formContainer}>
        {error && (
          <div className="mb-4 p-4 text-sm text-red-700 bg-red-100 rounded-lg">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit} className={`${styles.formGrid} ${styles.singleColumn}`}>
          <div className={`${styles.formGroup} ${styles.fullWidth}`}>
            <label htmlFor="proposito" className={styles.formLabel}>
              Propósito del Voto <span className={styles.required}>*</span>
            </label>
            <textarea
              id="proposito"
              name="proposito"
              value={formData.proposito}
              onChange={handleChange}
              required
              className={`${styles.formControl} ${styles.formTextarea}`}
              placeholder="Describe el propósito del voto..."
            />
            <p className={styles.formHelp}>Describe claramente el propósito para el cual se realiza este voto.</p>
          </div>

          <div className={styles.formGrid}>
            <div className={styles.formGroup}>
              <label htmlFor="montoTotal" className={styles.formLabel}>
                Monto Total <span className={styles.required}>*</span>
              </label>
              <input
                type="number"
                id="montoTotal"
                name="montoTotal"
                value={formData.montoTotal}
                onChange={handleChange}
                required
                min="0"
                className={styles.formControl}
                placeholder="$0"
              />
              <p className={styles.formHelp}>Monto total del compromiso en COP</p>
            </div>

            <div className={styles.formGroup}>
              <label htmlFor="fechaLimite" className={styles.formLabel}>
                Fecha Límite <span className={styles.required}>*</span>
              </label>
              <input
                type="date"
                id="fechaLimite"
                name="fechaLimite"
                value={formData.fechaLimite}
                onChange={handleChange}
                required
                className={styles.formControl}
              />
              <p className={styles.formHelp}>Fecha límite para completar el voto</p>
            </div>
          </div>

          <div className={`${styles.formGroup} ${styles.fullWidth}`}>
            <label htmlFor="miembroId" className={styles.formLabel}>
              Miembro <span className={styles.required}>*</span>
            </label>
                          className={styles.formControl}
            >
              <option value="">Selecciona un miembro</option>
              {miembros.map(miembro => (
                <option key={miembro.id} value={miembro.id}>
                  {`${miembro.apellidos}, ${miembro.nombres}`}
                </option>
              ))}
            </select>
            <p className={styles.formHelp}>Selecciona el miembro que realizará el voto</p>
          </div>

          <div className={styles.formActions}>
            <button
              type="button"
              onClick={() => router.back()}
              className="px-6 py-3 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
              disabled={loading}
            >
              Cancelar
            </button>
            <button
              type="submit"
              className="px-6 py-3 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700"
              disabled={loading}
            >
          </div>

          <div className="flex justify-end gap-4 mt-8">
            <button
              type="button"
              onClick={() => router.back()}
              className="px-6 py-3 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
              disabled={loading}
            >
              Cancelar
            </button>
            <button
              type="submit"
              className="px-6 py-3 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700"
              disabled={loading}
            >
              {loading ? (
                <div className="flex items-center gap-2">
                  <svg className="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  <span>Guardando...</span>
                </div>
              ) : (
                'Crear Voto'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}
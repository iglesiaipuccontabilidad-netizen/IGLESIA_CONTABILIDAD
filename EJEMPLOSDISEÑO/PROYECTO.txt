üìå Contexto del Proyecto: Sistema de Votos ‚Äì IPUC

Este proyecto es un Sistema de Votos y Compromisos Financieros para la Iglesia IPUC, desarrollado con las siguientes tecnolog√≠as:

Frontend: Se parte de archivos HTML, CSS y JS ya generados (obtenidos desde Cloud), que contienen todo el dise√±o visual y las interfaces del sistema (Dashboard, gesti√≥n de votos, miembros, registro de nuevos miembros, etc.).

Backend: Se debe implementar con Node.js + Express (recomendado) o framework similar, consumiendo los datos desde Supabase como base de datos.

Base de Datos: Supabase (PostgreSQL) ser√° usado como almacenamiento principal.

Tablas principales:

miembros (datos personales y de contacto).

votos (compromisos financieros asociados a un miembro).

pagos (abonos a los votos).

usuarios (administradores del sistema con login seguro).

üéØ Objetivo del Sistema

El sistema debe permitir a los administradores de la congregaci√≥n:

Gestionar Miembros

Registrar, editar y eliminar miembros.

Consultar informaci√≥n de contacto.

Ver el n√∫mero de votos activos por cada miembro.

Gestionar Votos (Compromisos Financieros)

Crear un voto (prop√≥sito, monto total, fecha l√≠mite).

Registrar pagos parciales (abonos).

Calcular el progreso de cada voto (% recaudado vs pendiente).

Identificar votos atrasados.

Dashboard Administrativo

Totales generales: comprometido, recaudado, pendiente.

Seguimiento de top deudores.

Listado de votos activos y su progreso.

Alertas de pr√≥ximos vencimientos.

Autenticaci√≥n y Roles

Acceso para administradores con login (JWT / Supabase Auth).

Diferentes roles: Administrador principal, colaboradores.

üîß Lineamientos T√©cnicos para Copilot

Frontend con HTML existente #/home/juanda/ipuc-contabilidad/EJEMPLOSDISE√ëO/dashboard-ipuc.html , /home/juanda/ipuc-contabilidad/EJEMPLOSDISE√ëO/pantallas-miembros-ipuc.html, /home/juanda/ipuc-contabilidad/EJEMPLOSDISE√ëO/dashboard-ipuc.html

Usar los HTML/CSS generados desde Cloud como plantillas base.

Integrar datos din√°micos con EJS / React / Vue (dependiendo de la estrategia que elija el equipo).

Reemplazar datos est√°ticos (ej: ‚Äú$15,450,000‚Äù) con valores consultados desde Supabase.

Backend (Node.js / Express)

Crear rutas RESTful:

/miembros (GET, POST, PUT, DELETE).

/votos (GET, POST, PUT, DELETE).

/pagos (POST, GET).

Middleware para autenticaci√≥n (JWT con Supabase).

Validaci√≥n de datos antes de guardar en la BD.

Base de Datos (Supabase)

miembros: id, nombres, apellidos, cc, fecha_nacimiento, g√©nero, tel√©fono, email.

votos: id, miembro_id, prop√≥sito, monto_total, recaudado, fecha_limite, estado.

pagos: id, voto_id, monto, fecha_pago.

usuarios: id, nombre_usuario, contrase√±a_hash, rol.

Integraci√≥n Supabase

Usar Supabase SDK para Node.js.

Todas las consultas CRUD deben conectarse directamente a las tablas mencionadas.